#set ( $widgetSDS = $_XPathTool.selectSingleNode($contentRoot, ".") )
#set ( $output =  "#outputWidget($widgetSDS)" )
$output.trim()
#*
    Outputs a Twitter Widget after injecting addtional client side options.
    See https://dev.twitter.com/docs/embedded-timelines for additional information.

    @param  $widgetSDS the structure data for the widget
*#
#macro ( outputWidget $widgetSDS )
    ## Required Setup Information
    #set ( $wCode = $widgetSDS.getChild('code').value )

    ## Make sure we have the required information before proceeding to display the widget.
    #if ( $wCode && $wCode != "")
        ## References to the dimension, appearence and advanced appearence groups.
        #set ( $wDimensionSDS = $widgetSDS.getChild('dimensions') )
        #set ( $wAppearenceSDS = $widgetSDS.getChild('appearence') )
        #set ( $wAdvAppearenceSDS = $wAppearenceSDS.getChild('advanced') )

        ## Map containing the client side settings.
        #set ( $wSettings =  {} )

        ## Dimension Settings
        #set ( $wWidth =  $wDimensionSDS.getChild("width").value )
        #if ( $wWidth && $wWidth != "" )
            #set ( $_void =  $wSettings.put("width", "'${wWidth}'") )
        #end

        #set ( $wHeight =  $wDimensionSDS.getChild("height").value )
        #if ( $wHeight && $wHeight != "" )
            #set ( $_void =  $wSettings.put("height", "'${wHeight}'") )
        #end

        ## Basic Appearence Settings
        #set ( $wTweetLimit = $wAppearenceSDS.getChild("tweet-limit").value )
        #if ( $wTweetLimit && $wTweetLimit != "" )
            #set ( $_void =  $wSettings.put("data-tweet-limit", "'${wTweetLimit}'") )
        #end

        #set ( $wTheme = $wAppearenceSDS.getChild("theme").value )
        #if ( $wTheme != "Default" )
            #set ( $_void =  $wSettings.put("data-theme", "'${wTheme}'") )
        #end

        ## Advanced color settings.
        #set ( $wBorderColor = $wAdvAppearenceSDS.getChild("border-color").value )
        #if ( $wBorderColor && $wBorderColor != "" )
            #set ( $_void =  $wSettings.put("data-border-color", "'${wBorderColor}'") )
        #end

        #set ( $wLinkColor = $wAdvAppearenceSDS.getChild("link-color").value )
        #if ( $wLinkColor && $wLinkColor != "" )
            #set ( $_void =  $wSettings.put("data-link-color", "'${wLinkColor}'") )
        #end

        ## Advanced "chrome" settings.
        #set ( $wChromeSettings = [] )

        #set ( $wIncHeader = $wAdvAppearenceSDS.getChild("header").getChild("value") )
        #if ( $wAdvAppearenceSDS.getChild("header").indexOf($wIncHeader) != -1 )
            #set ( $_void =  $wChromeSettings.add("noheader") )
        #end

        #set ( $wIncFooter = $wAdvAppearenceSDS.getChild("footer").getChild("value") )
        #if ( $wAdvAppearenceSDS.getChild("footer").indexOf($wIncFooter) != -1 )
            #set ( $_void =  $wChromeSettings.add("nofooter") )
        #end

        #set ( $wIncBorders = $wAdvAppearenceSDS.getChild("borders").getChild("value") )
        #if ( $wAdvAppearenceSDS.getChild("borders").indexOf($wIncBorders) != -1 )
            #set ( $_void =  $wChromeSettings.add("noborders") )
        #end

        #set ( $wIncScrollbar = $wAdvAppearenceSDS.getChild("scrollbar").getChild("value") )
        #if ( $wAdvAppearenceSDS.getChild("scrollbar").indexOf($wIncScrollbar) != -1 )
            #set ( $_void =  $wChromeSettings.add("noscrollbar") )
        #end

        #set ( $wTransparent = $wAdvAppearenceSDS.getChild("transparent").getChild("value") )
        #if ( $wAdvAppearenceSDS.getChild("transparent").indexOf($wTransparent) != -1 )
            #set ( $_void =  $wChromeSettings.add("transparent") )
        #end

        ## Merge the chrome settings into the widget settings map.
        #if ( $wChromeSettings.size() > 0 )
            #set ( $wChromeSettings = $_DisplayTool.list($wChromeSettings, " ") )
            #set ( $_void =  $wSettings.put("data-chrome", "'${wChromeSettings}'") )
        #end

        ## Convert the widget settings map to a string, remove the {} and ,
        #set ( $wSettings = $wSettings.toString() )
        #set ( $wSettings = $wSettings.substring(1, $_MathTool.sub($wSettings.length(),1)) )
        #set ( $wSettings = $wSettings.replaceAll(", ", " ") )

        ## Display the widget's code after injecting the custom settings.
        $wCode.replace("<a", "<a ${wSettings}")
    #end
#end